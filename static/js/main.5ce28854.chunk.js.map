{"version":3,"sources":["components/WalletTable/editIcon.svg","components/WalletTable/removeIcon.svg","actions/index.js","pages/Login/index.jsx","components/WalletHeader/index.jsx","components/WalletForm/index.jsx","components/WalletTable/index.jsx","pages/Wallet/index.jsx","App.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["module","exports","validateEmail","bool","type","payload","validatePass","receiveCoins","coins","saveExpenses","expensesInfo","expenses","fetchCoinsThunk","dispatch","a","fetch","response","json","data","id","value","description","currency","method","tag","exchangeRates","length","Login","this","props","isDisabled","className","data-testid","placeholder","onKeyUp","target","includes","required","to","disabled","React","Component","connect","state","user","WalletHeader","email","totalField","reduce","acc","curr","ask","toFixed","wallet","DEFAULT_EXPENSES_OBJECT","WalletForm","handleClick","bind","saveValueOnState","expensesObject","event","preventDefault","expensesList","setState","prevState","name","htmlFor","onChange","undefined","Object","keys","filter","e","map","coin","i","key","onClick","WalletTable","USD","CAD","GBP","ARS","BTC","LTC","EUR","JPY","CHF","AUD","CNY","ILS","ETH","XRP","expenseValue","expenseId","parentElement","innerHTML","Number","createCoinsNames","src","editIcon","alt","removeIcon","Wallet","App","exact","path","component","INITIAL_STATE","emailIsValid","passIsValid","userReducer","action","currencies","walletReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5ce28854.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/editIcon.7adc7d91.svg\";","module.exports = __webpack_public_path__ + \"static/media/removeIcon.eea42727.svg\";","// Coloque aqui suas actions\nexport const EMAIL_INPUT = 'EMAIL_INPUT';\nexport const VALIDATE_EMAIL = 'VALIDATE_EMAIL';\nexport const VALIDATE_PASS = 'VALIDATE_PASS';\nexport const FETCH_COINS = 'FETCH_COINS';\nexport const REQUEST_COINS = 'REQUEST_COINS';\nexport const RECEIVE_COINS = 'RECEIVE_COINS';\nexport const SAVE_EXPENSES = 'SAVE_EXPENSES';\nexport const FETCH_RIGHT_COINS = 'FETCH_RIGHT_COINS';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\n\nexport const saveEmailInput = (email) => ({\n  type: EMAIL_INPUT,\n  payload: email,\n});\n\nexport const validateEmail = (bool = false) => ({\n  type: VALIDATE_EMAIL,\n  payload: bool,\n});\n\nexport const validatePass = (bool = false) => ({\n  type: VALIDATE_PASS,\n  payload: bool,\n});\n\nexport const requestCoins = () => ({\n  type: REQUEST_COINS,\n});\n\nexport const receiveCoins = (coins) => ({\n  type: RECEIVE_COINS,\n  payload: coins,\n});\n\nexport const saveExpenses = (expensesInfo = []) => ({\n  type: SAVE_EXPENSES,\n  payload: {\n    expenses: expensesInfo,\n  },\n});\n\nexport const fetchCoinsThunk = (expenses = []) => (\n  async (dispatch) => {\n    dispatch(requestCoins());\n    const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const data = await response.json();\n    const expensesInfo = {\n      id: expenses[0],\n      value: expenses[1],\n      description: expenses[5],\n      currency: expenses[2],\n      method: expenses[3],\n      tag: expenses[4],\n      exchangeRates: data,\n    };\n    return (\n      dispatch(receiveCoins(data)),\n      expenses.length !== 0\n        ? dispatch(saveExpenses(expensesInfo))\n        : null\n    );\n  }\n);\n\nexport const fetchRightCoinsThunk = () => (\n  async (dispatch) => {\n    const response = await fetch('https://economia.awesomeapi.com.br/json/all');\n    const data = await response.json();\n    const rightData = Object.entries(data).filter((e) => e[0] !== 'USDT');\n    return dispatch(receiveCoins(rightData));\n  }\n);\n\nexport const deleteExpense = (expense, id) => ({\n  type: DELETE_EXPENSE,\n  payload: {\n    expenseValue: expense,\n    expenseId: id,\n  },\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { saveEmailInput, validateEmail, validatePass } from '../../actions';\nimport './login.css';\n\nclass Login extends React.Component {\n  render() {\n    const { isDisabled, dispatch } = this.props;\n    const MAX_PASSWORD_LENGTH = 5;\n    return (\n      <main className=\"container\">\n        <div className=\"content\">\n          <h1>Trybe</h1>\n          <form className=\"formLogin\">\n            <input\n              type=\"email\"\n              data-testid=\"email-input\"\n              id=\"email-input\"\n              placeholder=\"Digite seu e-mail\"\n              onKeyUp={ ({ target: { value } }) => {\n                if (value.includes('@') && value.includes('.com')) {\n                  dispatch(validateEmail(true));\n                  dispatch(saveEmailInput(value));\n                } else {\n                  dispatch(validateEmail());\n                }\n              } }\n              required\n            />\n            <input\n              type=\"password\"\n              data-testid=\"password-input\"\n              placeholder=\"Digite sua senha\"\n              onKeyUp={ ({ target: { value } }) => (\n                value.length >= MAX_PASSWORD_LENGTH\n                  ? dispatch(validatePass(true))\n                  : dispatch(validatePass())\n              ) }\n              required\n            />\n            <Link to=\"/carteira\">\n              <button\n                type=\"submit\"\n                className={ isDisabled ? 'buttonDisabled' : 'buttonEnabled' }\n                disabled={ isDisabled }\n              >\n                Entrar\n              </button>\n            </Link>\n          </form>\n        </div>\n      </main>\n    );\n  }\n}\n\nLogin.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n  isDisabled: PropTypes.bool.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  isDisabled: state.user.isDisabled,\n});\n\nexport default connect(mapStateToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './walletHeader.css';\n\nclass WalletHeader extends React.Component {\n  render() {\n    const { email, expenses } = this.props;\n    // Para chegar nesta solução do reduce, tive que consultar a branch do Laecio Silva:\n    // https://github.com/tryber/sd-018-b-project-trybewallet/blob/laecio-silva-project-trybewallet/src/components/Header/index.jsx\n    // Estava com problema nos testes, minha aplicação funcionava como o esperado sem o reduce, mas não passava no teste.\n    const totalField = expenses.reduce((acc, curr) => (\n      acc + (curr.value * curr.exchangeRates[curr.currency].ask)\n    ), 0);\n    return (\n      <header>\n        <h1>Trybe</h1>\n        <div className=\"user-info\">\n          <p data-testid=\"email-field\">\n            E-mail:\n            {' '}\n            {email}\n          </p>\n          <span data-testid=\"total-field\">\n            Despesa total: R$\n            {' '}\n            {totalField.toFixed(2)}\n          </span>\n          <span data-testid=\"header-currency-field\"> BRL</span>\n        </div>\n      </header>\n    );\n  }\n}\n\nWalletHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(WalletHeader);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchCoinsThunk } from '../../actions';\nimport './walletForm.css';\n\nconst DEFAULT_EXPENSES_OBJECT = {\n  value: 0,\n  currency: 'USD',\n  method: 'Dinheiro',\n  tag: 'Alimentação',\n  description: '',\n};\n\nclass WalletForm extends React.Component {\n  constructor() {\n    super();\n    this.handleClick = this.handleClick.bind(this);\n    this.saveValueOnState = this.saveValueOnState.bind(this);\n    this.state = {\n      expensesObject: DEFAULT_EXPENSES_OBJECT,\n    };\n  }\n\n  handleClick(event) {\n    event.preventDefault();\n    const { expenses, dispatch } = this.props;\n    const { expensesObject } = this.state;\n    const expensesList = [\n      expenses.length,\n      expensesObject.value,\n      expensesObject.currency,\n      expensesObject.method,\n      expensesObject.tag,\n      expensesObject.description,\n    ];\n    dispatch(fetchCoinsThunk(expensesList));\n    this.setState(\n      {\n        expensesObject: DEFAULT_EXPENSES_OBJECT,\n      },\n    );\n  }\n\n  saveValueOnState(event) {\n    event.preventDefault();\n    const { target } = event;\n    const { value } = target;\n    this.setState((prevState) => ({\n      expensesObject: { ...prevState.expensesObject, [target.name]: value },\n    }));\n  }\n\n  render() {\n    const { coins } = this.props;\n    const { expensesObject: { value, currency, method, tag, description } } = this.state;\n    return (\n      <main>\n        <form className=\"create\">\n          <label htmlFor=\"valueInput\">\n            Valor\n            <input\n              type=\"number\"\n              name=\"value\"\n              id=\"valueInput\"\n              data-testid=\"value-input\"\n              onChange={ this.saveValueOnState }\n              value={ value }\n            />\n          </label>\n          <label htmlFor=\"decriptionInput\">\n            Descrição\n            <input\n              type=\"text\"\n              id=\"descriptionInput\"\n              name=\"description\"\n              data-testid=\"description-input\"\n              onChange={ this.saveValueOnState }\n              value={ description }\n            />\n          </label>\n          <label htmlFor=\"coinSelect\">\n            Moeda\n            <select\n              id=\"coinSelect\"\n              name=\"currency\"\n              data-testid=\"currency-input\"\n              onChange={ this.saveValueOnState }\n              value={ currency }\n            >\n              {coins !== undefined\n                ? Object.keys(coins).filter((e) => e !== 'USDT').map((coin, i) => (\n                  <option value={ coin } key={ i } data-testid={ coin }>\n                    {coin}\n                  </option>\n                ))\n                : <option value=\"\">Aguarde</option>}\n            </select>\n          </label>\n          <label htmlFor=\"paymentMethod\">\n            Método de pagamento\n            <select\n              id=\"paymentMethod\"\n              name=\"method\"\n              data-testid=\"method-input\"\n              onChange={ this.saveValueOnState }\n              value={ method }\n            >\n              <option value=\"Dinheiro\">Dinheiro</option>\n              <option value=\"Cartão de crédito\">Cartão de crédito</option>\n              <option value=\"Cartão de débito\">Cartão de débito</option>\n            </select>\n          </label>\n          <label htmlFor=\"tagCategory\">\n            Tag\n            <select\n              id=\"tagCategory\"\n              name=\"tag\"\n              data-testid=\"tag-input\"\n              onChange={ this.saveValueOnState }\n              value={ tag }\n            >\n              <option value=\"Alimentação\">Alimentação</option>\n              <option value=\"Lazer\">Lazer</option>\n              <option value=\"Trabalho\">Trabalho</option>\n              <option value=\"Transporte\">Transporte</option>\n              <option value=\"Saúde\">Saúde</option>\n            </select>\n          </label>\n          <button\n            type=\"submit\"\n            onClick={ this.handleClick }\n          >\n            Adicionar despesa\n          </button>\n        </form>\n      </main>\n    );\n  }\n}\n\nWalletForm.propTypes = {\n  coins: PropTypes.objectOf(PropTypes.any).isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  coins: state.wallet.coins,\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(WalletForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteExpense } from '../../actions';\nimport './walletTable.css';\nimport editIcon from './editIcon.svg';\nimport removeIcon from './removeIcon.svg';\n\nclass WalletTable extends React.Component {\n  constructor() {\n    super();\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  createCoinsNames() {\n    return {\n      USD: 'Dólar Comercial',\n      CAD: 'Dólar Canadense',\n      GBP: 'Libra Esterlina',\n      ARS: 'Peso Argentino',\n      BTC: 'Bitcoin',\n      LTC: 'Litecoin',\n      EUR: 'Euro',\n      JPY: 'Iene Japonês',\n      CHF: 'Franco Suíço',\n      AUD: 'Dólar Australiano',\n      CNY: 'Yuan Chinês',\n      ILS: 'Novo Shekel Israelense',\n      ETH: 'Ethereum',\n      XRP: 'Ripple',\n    };\n  }\n\n  handleClick({ target }, expenseValue, expenseId) {\n    const { dispatch } = this.props;\n    dispatch(deleteExpense(expenseValue, expenseId));\n    target.parentElement.parentElement.innerHTML = '';\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            expenses.length !== 0\n              ? expenses.map((e) => (\n                <tr key={ e.id }>\n                  <td id=\"description\">{ e.description }</td>\n                  <td id=\"tag\">{ e.tag }</td>\n                  <td id=\"method\">{ e.method }</td>\n                  <td id=\"value\">{ Number(e.value).toFixed(2) }</td>\n                  <td id=\"currency\">{ this.createCoinsNames()[e.currency] }</td>\n                  <td id=\"cambio\">\n                    { Number(e.exchangeRates[e.currency].ask).toFixed(2) }\n                  </td>\n                  <td id=\"convertedValue\">\n                    {\n                      (Number(e.value) * e.exchangeRates[e.currency].ask).toFixed(2)\n                    }\n                  </td>\n                  <td>Real</td>\n                  <td>\n                    <button type=\"button\" data-testid=\"edit-btn\" className=\"edit\">\n                      <img src={ editIcon } alt=\"Icon Edit\" />\n                    </button>\n                    <button\n                      type=\"button\"\n                      data-testid=\"delete-btn\"\n                      onClick={ (event) => this.handleClick(\n                        event,\n                        (Number(e.value) * e.exchangeRates[e.currency].ask).toFixed(2),\n                        e.id,\n                      ) }\n                      className=\"remove\"\n                    >\n                      <img src={ removeIcon } alt=\"Remove Icon\" />\n                    </button>\n\n                  </td>\n                </tr>\n              ))\n              : expenses\n          }\n        </tbody>\n      </table>\n    );\n  }\n}\n\nWalletTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nexport default connect(mapStateToProps)(WalletTable);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport WalletHeader from '../../components/WalletHeader';\nimport WalletForm from '../../components/WalletForm';\nimport { fetchCoinsThunk } from '../../actions';\nimport WalletTable from '../../components/WalletTable';\n\nclass Wallet extends React.Component {\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch(fetchCoinsThunk());\n  }\n\n  render() {\n    return (\n      <div>\n        <WalletHeader />\n        <WalletForm />\n        <WalletTable />\n      </div>\n    );\n  }\n}\n\nWallet.propTypes = {\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect()(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","import { EMAIL_INPUT, VALIDATE_EMAIL, VALIDATE_PASS } from '../actions';\n\n// Esse reducer será responsável por tratar as informações da pessoa usuária\nconst INITIAL_STATE = {\n  email: '',\n  emailIsValid: false,\n  passIsValid: false,\n  isDisabled: true,\n};\n\nconst TRUE = true;\nconst FALSE = false;\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case EMAIL_INPUT:\n    return {\n      ...state,\n      email: action.payload,\n    };\n  case VALIDATE_EMAIL:\n    return {\n      ...state,\n      emailIsValid: action.payload,\n      isDisabled: state.emailIsValid && state.passIsValid ? FALSE : TRUE,\n    };\n  case VALIDATE_PASS:\n    return {\n      ...state,\n      passIsValid: action.payload,\n      isDisabled: state.emailIsValid && state.passIsValid ? FALSE : TRUE,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default userReducer;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport { DELETE_EXPENSE, RECEIVE_COINS, SAVE_EXPENSES } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  coins: {},\n};\n\nconst walletReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case RECEIVE_COINS:\n    return { ...state, coins: action.payload };\n  case SAVE_EXPENSES:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.payload.expenses],\n    };\n  case DELETE_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.filter((e) => e.id !== action.payload.expenseId),\n    };\n  default:\n    return state;\n  }\n};\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport userReducer from './user';\nimport walletReducer from './wallet';\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({ user: userReducer, wallet: walletReducer });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}